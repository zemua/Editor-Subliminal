/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.subliminalrich.editor;

import java.awt.Desktop;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.swing.JFileChooser;
import javax.swing.JScrollBar;
import javax.swing.SwingWorker;

/**
 *
 * @author JasusRich
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EscogeAfirmaciones = new javax.swing.JFileChooser();
        escogeGrabacion = new javax.swing.JFileChooser();
        escogeMusica = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        labelLicencia = new javax.swing.JLabel();
        labelSBR = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        botonAbrir = new javax.swing.JButton();
        botonGrabar = new javax.swing.JButton();
        botonPararGrabacion = new javax.swing.JButton();
        labelArchivo = new javax.swing.JLabel();
        botonMusica = new javax.swing.JButton();
        infoMusica = new javax.swing.JLabel();
        labelMusica = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        botonRestarRepeticiones = new javax.swing.JButton();
        botonSumarRepeticiones = new javax.swing.JButton();
        labelNumeroRepeticiones = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        labelFrecuencia = new javax.swing.JLabel();
        sliderFrecuenciaTonos = new javax.swing.JSlider();
        labelFrecuenciaTonos = new javax.swing.JLabel();
        sliderBandasVocoder = new javax.swing.JSlider();
        labelBandasVocoder = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboVentanaVocoder = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sliderVolumenMusica = new javax.swing.JSlider();
        labelVolumenMusica = new javax.swing.JLabel();
        sliderVolumenIsocronico = new javax.swing.JSlider();
        labelVolumenIsocronico = new javax.swing.JLabel();
        sliderVolumenBinaural = new javax.swing.JSlider();
        labelVolumenBinaural = new javax.swing.JLabel();
        sliderVolumenSilent = new javax.swing.JSlider();
        labelVolumenSilent = new javax.swing.JLabel();
        sliderVocoder = new javax.swing.JSlider();
        labelVolumenVocoder = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        botonWavToMp3 = new javax.swing.JButton();
        botonMp3ToWav = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        botonProcesar = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        EscogeAfirmaciones.setDialogTitle("Selecciona el audio WAV con tus afirmaciones");
        EscogeAfirmaciones.setFileFilter(new FiltroArchivos());

        escogeGrabacion.setDialogTitle("Escoge el directorio dónde guardar tu grabación");
        escogeGrabacion.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        escogeMusica.setDialogTitle("Selecciona tu música");
        escogeMusica.setFileFilter(new FiltroArchivos());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelLicencia.setText("Este es un programa gratuito y de libre distribución. Versión 0.3.3.0");

        labelSBR.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSBR.setForeground(new java.awt.Color(0, 0, 255));
        labelSBR.setText("Click aquí para visitar www.SubliminalRich.com");
        labelSBR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelSBRMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelLicencia)
                    .addComponent(labelSBR))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLicencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSBR)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botonAbrir.setText("Buscar");
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });

        botonGrabar.setText("Grabar");
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });

        botonPararGrabacion.setText("Detener");
        botonPararGrabacion.setEnabled(false);
        botonPararGrabacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPararGrabacionActionPerformed(evt);
            }
        });

        labelArchivo.setText("Selecciona el archivo (.wav PCM) con tus afirmaciones, o grábalo directamente");

        botonMusica.setText("Abrir Música");
        botonMusica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMusicaActionPerformed(evt);
            }
        });

        infoMusica.setText("Utiliza, si lo deseas, otra música compatible (.wav PCM).");

        labelMusica.setText("Música actual: Sonido de un riachuelo.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(botonAbrir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonGrabar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonPararGrabacion))
                    .addComponent(labelArchivo)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(botonMusica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoMusica))
                    .addComponent(labelMusica))
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAbrir)
                    .addComponent(botonGrabar)
                    .addComponent(botonPararGrabacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelArchivo)
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonMusica)
                    .addComponent(infoMusica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMusica)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Pistas Base", jPanel3);

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botonRestarRepeticiones.setText("-");
        botonRestarRepeticiones.setEnabled(false);
        botonRestarRepeticiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRestarRepeticionesActionPerformed(evt);
            }
        });

        botonSumarRepeticiones.setText("+");
        botonSumarRepeticiones.setEnabled(false);
        botonSumarRepeticiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSumarRepeticionesActionPerformed(evt);
            }
        });

        labelNumeroRepeticiones.setText("Repetir audio de voz: 1 veces");

        jSlider1.setMajorTickSpacing(100);
        jSlider1.setMaximum(20000);
        jSlider1.setMinimum(10000);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setValue(15000);
        jSlider1.setEnabled(false);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        labelFrecuencia.setText("Silent Modulado a: 15000 hz");

        sliderFrecuenciaTonos.setMaximum(2000);
        sliderFrecuenciaTonos.setMinimum(1);
        sliderFrecuenciaTonos.setValue(1000);
        sliderFrecuenciaTonos.setEnabled(false);
        sliderFrecuenciaTonos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderFrecuenciaTonosStateChanged(evt);
            }
        });

        labelFrecuenciaTonos.setText("Frecuencia de tonos: 10.00 hz");

        sliderBandasVocoder.setMaximum(15);
        sliderBandasVocoder.setMinimum(3);
        sliderBandasVocoder.setValue(9);
        sliderBandasVocoder.setEnabled(false);
        sliderBandasVocoder.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBandasVocoderStateChanged(evt);
            }
        });

        labelBandasVocoder.setText("Bandas del Vocoder: 9");

        jLabel2.setText("(Más bandas = Más calidad = Más memoria y tiempo de procesamiento necesarios)");

        jLabel5.setText("Intenta probar primero el resultado con 1 repetición, tardará menos en procesarse");

        comboVentanaVocoder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bandas Normales", "Filtrar Chasquidos", "Filtro Fuerte", "¡Extra Fuerte!" }));
        comboVentanaVocoder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVentanaVocoderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelFrecuencia))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(sliderBandasVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelBandasVocoder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboVentanaVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(sliderFrecuenciaTonos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelFrecuenciaTonos))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(botonRestarRepeticiones)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonSumarRepeticiones)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelNumeroRepeticiones))
                            .addComponent(jLabel5)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonRestarRepeticiones)
                    .addComponent(botonSumarRepeticiones)
                    .addComponent(labelNumeroRepeticiones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderFrecuenciaTonos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFrecuenciaTonos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFrecuencia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderBandasVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelBandasVocoder)
                        .addComponent(comboVentanaVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Parámetros", jPanel6);

        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Recuerda que subir demasiado los volumenes puede distorsionar el audio.");

        jLabel4.setText("Si esto sucediera, al finalizar la generación del audio recibirás un aviso.");

        sliderVolumenMusica.setEnabled(false);
        sliderVolumenMusica.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVolumenMusicaStateChanged(evt);
            }
        });

        labelVolumenMusica.setText("Volumen Música: 50%");

        sliderVolumenIsocronico.setValue(30);
        sliderVolumenIsocronico.setEnabled(false);
        sliderVolumenIsocronico.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVolumenIsocronicoStateChanged(evt);
            }
        });

        labelVolumenIsocronico.setText("Volumen Isocrónico Integrado: 30%");

        sliderVolumenBinaural.setValue(5);
        sliderVolumenBinaural.setEnabled(false);
        sliderVolumenBinaural.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVolumenBinauralStateChanged(evt);
            }
        });

        labelVolumenBinaural.setText("Volumen Binaural: 5%");

        sliderVolumenSilent.setValue(45);
        sliderVolumenSilent.setEnabled(false);
        sliderVolumenSilent.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVolumenSilentStateChanged(evt);
            }
        });

        labelVolumenSilent.setText("Volumen Silent Subliminal: 45%");

        sliderVocoder.setEnabled(false);
        sliderVocoder.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVocoderStateChanged(evt);
            }
        });

        labelVolumenVocoder.setText("Volumen Vocoder: 50%");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(sliderVolumenMusica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelVolumenMusica))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(sliderVolumenIsocronico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelVolumenIsocronico))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(sliderVolumenBinaural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelVolumenBinaural))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(sliderVolumenSilent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelVolumenSilent))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(sliderVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelVolumenVocoder)))
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderVolumenMusica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVolumenMusica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderVolumenIsocronico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVolumenIsocronico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderVolumenBinaural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVolumenBinaural))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderVolumenSilent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVolumenSilent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderVocoder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVolumenVocoder))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Volúmenes", jPanel8);

        botonWavToMp3.setText("Convertir a Wav");
        botonWavToMp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonWavToMp3ActionPerformed(evt);
            }
        });

        botonMp3ToWav.setText("Convertir a mp3");

        jLabel6.setText("Selecciona el tipo de conversión que deseas realizar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botonWavToMp3)
                        .addGap(18, 18, 18)
                        .addComponent(botonMp3ToWav))
                    .addComponent(jLabel6))
                .addContainerGap(293, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonWavToMp3)
                    .addComponent(botonMp3ToWav))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Conversor", jPanel1);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/subliminalrich/editor/recursos/sbr-logo-espanol-180h - copia.png"))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonProcesar.setText("Generar Subliminal");
        botonProcesar.setEnabled(false);
        botonProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesarActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setText("Recuerda que lo más importante (y complicado)\nes redactar las afirmaciones.\nConsulta nuestra comunidad en el foro.\nEsperando por la pista de voz...\n");
        scrollPane.setViewportView(textArea);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(botonProcesar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPane))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonProcesar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelSBRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSBRMouseClicked
        URI uri = null;
        try {
            uri = new URI("www.subliminalrich.com/espanol/");
        } catch (URISyntaxException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_labelSBRMouseClicked

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        int returnVal = EscogeAfirmaciones.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = EscogeAfirmaciones.getSelectedFile();
            try {
                // What to do with the file
                archivoAbierto = file;
                Conversor modulador = new Conversor(archivoAbierto.getAbsolutePath());
                if (modulador.necesitaConversion() == 0 || modulador.necesitaConversion() == 1) {
                    botonProcesar.setEnabled(true);
                    labelArchivo.setText("Archivo: " + file.getName());
                    activaControles();
                    textArea.append("Ya puedes generar tu subliminal.\n");
                } else {
                    botonProcesar.setEnabled(false);
                    labelArchivo.setText("Codificación de archivo no válida");
                }
            } catch (Exception ex) {
                System.out.println("problem accessing file " + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        botonGrabar.setEnabled(false);
        botonAbrir.setEnabled(false);
        botonPararGrabacion.setEnabled(true);
        botonProcesar.setEnabled(false);
        desactivaControles();

        int returnVal = escogeGrabacion.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = escogeGrabacion.getSelectedFile();
            try {
                // What to do with the file
                archivoAbierto = file;
                grabadora.setRuta(archivoAbierto);
                grabadora.captureAudio();
                BackGrabador backgrabador = new BackGrabador(grabadora);
                backgrabador.execute();
            } catch (Exception ex) {
                System.out.println("problem accessing file " + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
            botonGrabar.setEnabled(true);
            botonAbrir.setEnabled(true);
            botonPararGrabacion.setEnabled(false);
        }
    }//GEN-LAST:event_botonGrabarActionPerformed

    private void botonPararGrabacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPararGrabacionActionPerformed

        grabadora.detener();

        if (grabadora.error == 0) {
            labelArchivo.setText("Archivo grabado: " + grabadora.getName());
            botonProcesar.setEnabled(true);
            activaControles();
            textArea.append("Ya puedes crear tu subliminal.\n");
        } else {
            System.out.println(grabadora.error);
            labelArchivo.setText("Se ha producido un error en la grabación");
        }

        botonPararGrabacion.setEnabled(false);
        botonAbrir.setEnabled(true);
        botonGrabar.setEnabled(true);
    }//GEN-LAST:event_botonPararGrabacionActionPerformed

    private void botonMusicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMusicaActionPerformed
        int returnVal = escogeMusica.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // Archivo escogido
            File file = escogeMusica.getSelectedFile();
            try {
                // Qué hacer con el archivo
                Conversor modulador = new Conversor(archivoAbierto.getAbsolutePath());
                if (modulador.necesitaConversion() == 0 || modulador.necesitaConversion() == 1) {
                    archivoMusica = file.getAbsolutePath();
                    labelMusica.setText("Música actual: " + file.getName());
                }
            } catch (Exception e) {
                System.out.println(e.getStackTrace());
            }
        } else { // Selección de archivo cancelada
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_botonMusicaActionPerformed

    private void botonRestarRepeticionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRestarRepeticionesActionPerformed
        if (nRepeticiones > 1) {
            nRepeticiones--;
            labelNumeroRepeticiones.setText("Repetir audio de voz: " + nRepeticiones + " veces");
        }
    }//GEN-LAST:event_botonRestarRepeticionesActionPerformed

    private void botonSumarRepeticionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSumarRepeticionesActionPerformed
        nRepeticiones++;
        labelNumeroRepeticiones.setText("Repetir audio de voz: " + nRepeticiones + " veces");
    }//GEN-LAST:event_botonSumarRepeticionesActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        labelFrecuencia.setText("Silent Modulado a: " + jSlider1.getValue() + " hz");
    }//GEN-LAST:event_jSlider1StateChanged

    private void sliderFrecuenciaTonosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderFrecuenciaTonosStateChanged
        labelFrecuenciaTonos.setText("Frecuencia de tonos: " + getValorFTonos().toString() + " hz");
    }//GEN-LAST:event_sliderFrecuenciaTonosStateChanged

    private void sliderVolumenMusicaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVolumenMusicaStateChanged
        labelVolumenMusica.setText("Volumen Música: " + sliderVolumenMusica.getValue() + "%");
    }//GEN-LAST:event_sliderVolumenMusicaStateChanged

    private void sliderVolumenIsocronicoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVolumenIsocronicoStateChanged
        labelVolumenIsocronico.setText("Volumen Isocrónico: " + sliderVolumenIsocronico.getValue() + "%");
    }//GEN-LAST:event_sliderVolumenIsocronicoStateChanged

    private void sliderVolumenBinauralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVolumenBinauralStateChanged
        labelVolumenBinaural.setText("Volumen Binaural: " + sliderVolumenBinaural.getValue() + "%");
    }//GEN-LAST:event_sliderVolumenBinauralStateChanged

    private void sliderVolumenSilentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVolumenSilentStateChanged
        labelVolumenSilent.setText("Volumen Silent Subliminal: " + sliderVolumenSilent.getValue() + "%");
    }//GEN-LAST:event_sliderVolumenSilentStateChanged

    private void sliderVocoderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVocoderStateChanged
        labelVolumenVocoder.setText("Volumen Vocoder: " + sliderVocoder.getValue() + "%");
    }//GEN-LAST:event_sliderVocoderStateChanged

    private void botonProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesarActionPerformed

        Trabajador worker = new Trabajador();
        worker.execute();
    }//GEN-LAST:event_botonProcesarActionPerformed

    private void sliderBandasVocoderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBandasVocoderStateChanged
        labelBandasVocoder.setText("Bandas del Vocoder: " + sliderBandasVocoder.getValue());
    }//GEN-LAST:event_sliderBandasVocoderStateChanged
    int ventana = 1; // Tipo de ventana del vocoder
    private void comboVentanaVocoderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVentanaVocoderActionPerformed
        int item = comboVentanaVocoder.getSelectedIndex();
        if (item == 0) {
            ventana = 1;
        }
        if (item == 1) {
            ventana = 9;
        }
        if (item == 2) {
            ventana = 6;
        }
        if (item == 3) {
            ventana = 4;
        }
    }//GEN-LAST:event_comboVentanaVocoderActionPerformed

    private void botonWavToMp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWavToMp3ActionPerformed
            // TODO add your handling code here:
    }//GEN-LAST:event_botonWavToMp3ActionPerformed

    class Trabajador extends SwingWorker<Void, Void> {

        /*ModulateWav modulador;

         public Trabajador(ModulateWav modulador) {
         this.modulador = modulador;
         }*/
        @Override
        protected Void doInBackground() throws Exception {
            try {
                // Realizamos aquí el trabajo de fondo para no bloquear el programa
                JScrollBar bar = scrollPane.getVerticalScrollBar();
                List<Double> volumenesList = new ArrayList<>();
                List<String> archivosList = new ArrayList<>();

                // Deshabilitamos los botones
                botonProcesar.setEnabled(false);
                botonAbrir.setEnabled(false);
                botonGrabar.setEnabled(false);
                botonMusica.setEnabled(false);
                desactivaControles();

                boolean todaviaNoError = true;

                textArea.append("\nProcesando el audio subliminal...\n");
                bar.setValue(bar.getMaximum());

                // Inicializamos el modulador
                String rutaVoz = archivoAbierto.getAbsolutePath();
                ModulateWav modulador = new ModulateWav(rutaVoz);

                modulador.bar = bar;
                modulador.textArea = textArea;

                if (modulador.error != 0) {
                    todaviaNoError = false;
                    textArea.append("Error abriendo el archivo de voz...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.error = 0;
                }

                String rutaAuxiliar;

                textArea.append("Convirtiendo la voz...\n");
                bar.setValue(bar.getMaximum());
                // Pon las rutas de la entrada de voz, la voz convertida, y conviértela!
                //modulador.setVozEntrada(rutaVoz);
                modulador.setVozConvertida(getRutaTemporal("voz"));
                modulador.convertirVoz();

                if (modulador.error != 0) {
                    todaviaNoError = false;
                    textArea.append("Error abriendo la pista de voz...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.error = 0;
                }

                textArea.append("Repitiendo en bucle la pista de voz...\n");
                bar.setValue(bar.getMaximum());
                modulador.setRepeticiones(nRepeticiones);
                rutaAuxiliar = getRutaTemporal("vozrepetida");
                modulador.repetir(modulador.getRepeticiones(), modulador.getVozConvertida(), rutaAuxiliar);
                ModulateWav.borrarArchivo(modulador.getVozConvertida()); // Borramos el archivo temporal
                modulador.setVozConvertida(rutaAuxiliar);

                if (modulador.error != 0) {
                    todaviaNoError = false;
                    textArea.append("Error repitiendo la pista de voz...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.error = 0;
                }

                if (sliderVolumenMusica.getValue() != 0 || sliderVocoder.getValue() != 0 || sliderVolumenIsocronico.getValue() != 0) {
                    textArea.append("Obteniendo el archivo de música...\n");
                    bar.setValue(bar.getMaximum());

                    // Obtenemos la ruta al archivo de música
                    if (archivoMusica.equals("")) {
                        // Copiamos la música del recurso interno al inputstream y lo escribimos en un nuevo archivo
                        rutaAuxiliar = archivoAbierto.getParent() + System.getProperty("file.separator") + "SonidoDeRelleno" + renuevaTimeStamp() + ".wav";
                        // La metemos a la carpeta donde sacamos la voz por problemas con cerrar el stream en windows7
                        modulador.setMusica("recursos/zRiver.wav");
                        modulador.copiarRecurso(modulador.getMusica(), rutaAuxiliar);
                        //modulador.getFile(modulador.getMusica(), rutaAuxiliar);
                        modulador.setMusica(rutaAuxiliar);
                    } else {
                        modulador.setMusica(archivoMusica);
                    }

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error obteniendo el archivo de música...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }

                    textArea.append("Convirtiendo parámetros de la música...\n");
                    bar.setValue(bar.getMaximum());
                    // Convertimos la música en caso de ser necesario
                    rutaAuxiliar = getRutaTemporal("convMusica");
                    Conversor convertiente = new Conversor(modulador.getMusica(), rutaAuxiliar);
                    if (convertiente.necesitaConversion() == 1) { // necesita conversion
                        convertiente.convertir();
                        if (archivoMusica.equals("")) { // Solamente si sacamosel archivo del paquete...
                            ModulateWav.borrarArchivo(modulador.getMusica());
                        }
                        modulador.setMusica(rutaAuxiliar);
                    } else if (convertiente.necesitaConversion() == 0) {
                        // El archivo no necesita conversión y no hay que tomar acción ninguna
                    } else {
                        modulador.error = 1;
                    }

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error convirtiendo la música...\n");
                        textArea.append(modulador.errorMensaje + "\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }

                    textArea.append("Configurando duración de la música...\n");
                    bar.setValue(bar.getMaximum());
                    // Repetimos la música a la calidad correcta para completar el tiempo de la pista
                    rutaAuxiliar = getRutaTemporal("musicarepetida");
                    modulador.repetirHastaIgualar(modulador.getMusica(), modulador.getVozConvertida(), rutaAuxiliar);
                    ModulateWav.borrarArchivo(modulador.getMusica()); // Borramos el archivo temporal
                    modulador.setMusica(rutaAuxiliar);

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error configurando la duración de la pista...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }
                    archivosList.add(modulador.getMusica());
                    volumenesList.add((double) sliderVolumenMusica.getValue());
                }

                if (sliderVolumenIsocronico.getValue() != 0 && sliderVolumenMusica.getValue() != 0) {
                    textArea.append("Generando un tono isocrónico...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setIsocronicoEnvelope(getRutaTemporal("envelope"));
                    int segundos = modulador.getSegundos(modulador.getVozConvertida());
                    float frecuencia = sliderFrecuenciaTonos.getValue() / 100;
                    modulador.generarPulsosEnveloped(modulador.getFrecuenciaMuestreo(), segundos, modulador.getIsocronicoEnvelope(), frecuencia, frecuencia);

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error generando un tono isocrónico...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }

                    textArea.append("Integrando el tono isocrónico en la música...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setisocronicoIntegrado(getRutaTemporal("isointegrado"));
                    int pequeno = modulador.getPequeno(modulador.getMusica(), modulador.getIsocronicoEnvelope());
                    if (pequeno == 1) {
                        modulador.multiplicarOndas(modulador.getMusica(), modulador.getIsocronicoEnvelope(), modulador.getisocronicoIntegrado());
                    } else if (pequeno == 2) {
                        modulador.multiplicarOndas(modulador.getIsocronicoEnvelope(), modulador.getMusica(), modulador.getisocronicoIntegrado());
                    } else {
                        modulador.error = 1;
                    }

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error integrando el tono isocrónico en la música...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }
                    archivosList.add(modulador.getisocronicoIntegrado());
                    volumenesList.add((double) sliderVolumenIsocronico.getValue());
                }

                if (sliderVolumenBinaural.getValue() != 0 && sliderVolumenMusica.getValue() != 0) {
                    textArea.append("Generando tono binaural...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setbinaural(getRutaTemporal("binaural"));
                    modulador.generarTonoEstereo(modulador.getFrecuenciaMuestreo(), modulador.getSegundos(modulador.getVozConvertida()), modulador.getbinaural(), 300, 300 + (sliderFrecuenciaTonos.getValue() / 100));

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error generando el tono binaural...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }
                    archivosList.add(modulador.getbinaural());
                    volumenesList.add((double) sliderVolumenBinaural.getValue() / 10);
                }

                if (sliderVolumenSilent.getValue() != 0) {
                    textArea.append("Modulando la voz a altas frecuencias...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setSilent(getRutaTemporal("silent"));
                    modulador.SetModulacion(jSlider1.getValue());
                    modulador.hacerSilent(modulador.getVozConvertida(), modulador.getSilent());

                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error modulando la voz a altas frecuencias...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }
                    archivosList.add(modulador.getSilent());
                    volumenesList.add((double) sliderVolumenSilent.getValue());
                }


                if (sliderVocoder.getValue() != 0 && sliderVolumenMusica.getValue() != 0) {
                    // VOCODER!!
                    textArea.append("Realizando la Vocodificación...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setVocoder(getRutaTemporal("vocoder"));
                    int milisegundos = 25; // Tamaño de la ventana
                    int frecuenciaMuestreo = modulador.getFrecuenciaMuestreo(); // Frecuencia de muestreo del audio
                    int canales = sliderBandasVocoder.getValue();
                    modulador.ventana = ventana;

                    modulador.vocodificar(modulador.getVozConvertida(), modulador.getMusica(), modulador.getVocoder(), canales, milisegundos, frecuenciaMuestreo);

                    // Terminada la vocodificación
                    if (modulador.error != 0) {
                        todaviaNoError = false;
                        textArea.append("Error realizando la vocodificación...\n");
                        bar.setValue(bar.getMaximum());
                        modulador.error = 0;
                    }
                    archivosList.add(modulador.getVocoder());
                    volumenesList.add((double) sliderVocoder.getValue());
                }


                if (todaviaNoError == true && archivosList.size() > 0) {
                    textArea.append("Juntando todas las pistas...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.setOutput(renuevaRutaTerminado());
                    //String[] arrayPistas = {modulador.getSilent(), modulador.getMusica(), modulador.getisocronicoIntegrado(), modulador.getbinaural(), modulador.getVocoder()};
                    String[] arrayPistas = archivosList.toArray(new String[archivosList.size()]);
                    // Pasar los volumenes en base a 100 en porcentaje
                    //double[] arrayVolumenes = {sliderVolumenSilent.getValue(), sliderVolumenMusica.getValue(), sliderVolumenIsocronico.getValue(), sliderVolumenBinaural.getValue() / 10, sliderVocoder.getValue()};
                    double[] arrayVolumenes = new double[volumenesList.size()];
                    for(int i = 0; i<arrayVolumenes.length; i++){
                        arrayVolumenes[i] = volumenesList.get(i);
                    }
                    modulador.sumarOndas(arrayPistas, arrayVolumenes, modulador.getOutput());
                }

                if (modulador.error != 0) {
                    todaviaNoError = false;
                    textArea.append("Error juntando todas las pistas...\n");
                    bar.setValue(bar.getMaximum());
                    modulador.error = 0;
                }


                textArea.append("Borrando los archivos temporales...\n");
                bar.setValue(bar.getMaximum());
                // Borramos todos los archivos temporales generados en el proceso
                modulador.borrarTemporales();

                if (ModulateWav.errorStatic == true) {
                    textArea.append("No se han podido borrar todos los archivos.\n");
                }

                // Habilitamos de nuevo los controles
                botonProcesar.setEnabled(true);
                botonAbrir.setEnabled(true);
                botonGrabar.setEnabled(true);
                botonMusica.setEnabled(true);
                activaControles();

                if(archivosList.isEmpty()){
                    textArea.append("Todos los volúmenes están a 0%\n");
                    bar.setValue(bar.getMaximum());
                }
                else if (modulador.getPorcentajeSobremodulacion() > 0.0 && todaviaNoError == true) {
                    DecimalFormat dec = new DecimalFormat("#0.00");
                    textArea.append("Creado: " + dec.format(modulador.getPorcentajeSobremodulacion()) + "% sobremodulado (demasiado volumen)\n");
                    bar.setValue(bar.getMaximum());
                } else if (todaviaNoError == true) {
                    textArea.append("¡Subliminal Creado!\n");
                    bar.setValue(bar.getMaximum());
                } else {
                    textArea.append("Una de las etapas no se ha podido procesar\n");
                    bar.setValue(bar.getMaximum());
                }
            } catch (Exception e) {
                System.err.println("Error inesperado procesando el archivo: " + e);
            }

            return null;
        }
    };
    Grabadora grabadora = new Grabadora();
    String directorioGrabacion;

    // El trabajador de fondo de la grabadora
    class BackGrabador extends SwingWorker<Void, Void> {

        Grabadora grabadora;

        public BackGrabador(Grabadora grabadora) {
            this.grabadora = grabadora;
        }

        @Override
        protected Void doInBackground() throws Exception {

            //Set the file type and the file extension
            archivoAbierto = new File(grabadora.getRuta());
            // se ha establecido al ruta al hacer click en grabar
            AudioFileFormat.Type fileType = AudioFileFormat.Type.WAVE;
            File audioFile = archivoAbierto;

            try {
                grabadora.targetDataLine.open(grabadora.audioFormat);
                grabadora.targetDataLine.start();
                AudioSystem.write(new AudioInputStream(grabadora.targetDataLine), fileType, audioFile);
            } catch (Exception e) {
                e.printStackTrace();
                grabadora.error = 1;
            }//end catch

            return null;
        }
    };

    public Float getValorFTonos() {
        return new Float(sliderFrecuenciaTonos.getValue()) / 100;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser EscogeAfirmaciones;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonMp3ToWav;
    private javax.swing.JButton botonMusica;
    private javax.swing.JButton botonPararGrabacion;
    private javax.swing.JButton botonProcesar;
    private javax.swing.JButton botonRestarRepeticiones;
    private javax.swing.JButton botonSumarRepeticiones;
    private javax.swing.JButton botonWavToMp3;
    private javax.swing.JComboBox comboVentanaVocoder;
    private javax.swing.JFileChooser escogeGrabacion;
    private javax.swing.JFileChooser escogeMusica;
    private javax.swing.JLabel infoMusica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelArchivo;
    private javax.swing.JLabel labelBandasVocoder;
    private javax.swing.JLabel labelFrecuencia;
    private javax.swing.JLabel labelFrecuenciaTonos;
    private javax.swing.JLabel labelLicencia;
    private javax.swing.JLabel labelMusica;
    private javax.swing.JLabel labelNumeroRepeticiones;
    private javax.swing.JLabel labelSBR;
    private javax.swing.JLabel labelVolumenBinaural;
    private javax.swing.JLabel labelVolumenIsocronico;
    private javax.swing.JLabel labelVolumenMusica;
    private javax.swing.JLabel labelVolumenSilent;
    private javax.swing.JLabel labelVolumenVocoder;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSlider sliderBandasVocoder;
    private javax.swing.JSlider sliderFrecuenciaTonos;
    private javax.swing.JSlider sliderVocoder;
    private javax.swing.JSlider sliderVolumenBinaural;
    private javax.swing.JSlider sliderVolumenIsocronico;
    private javax.swing.JSlider sliderVolumenMusica;
    private javax.swing.JSlider sliderVolumenSilent;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    // Ruta del archivo abierto con las afirmaciones originales
    static File archivoAbierto;
    // Propiedad del sistema, carpeta de archivos temporales
    static String property = "java.io.tmpdir";
    // Pasar el directorio temporal del sistema a la variable
    static String tempDir = System.getProperty(property);
    // Número de repeticiones que tendrá el audio de voz original
    // TODO cambiar número de repeticiones antes de distribuirlo
    int nRepeticiones = 1;
    String archivoMusica = "";

    public static String getRutaTemporal(String nombre) {
        String rutaVozTemporal = archivoAbierto.getParent() + System.getProperty("file.separator") + nombre + Long.toString(System.nanoTime()) + ".wav";
        return rutaVozTemporal;
    }

    public static String getRutaTemporalSistema(String nombre) {
        String rutaVozTemporal = tempDir + nombre + Long.toString(System.nanoTime()) + ".wav";
        return rutaVozTemporal;
    }

    public void desactivaControles() {
        jSlider1.setEnabled(false);
        sliderFrecuenciaTonos.setEnabled(false);
        sliderVolumenBinaural.setEnabled(false);
        sliderVolumenIsocronico.setEnabled(false);
        sliderVolumenMusica.setEnabled(false);
        sliderVolumenSilent.setEnabled(false);
        sliderVocoder.setEnabled(false);
        sliderBandasVocoder.setEnabled(false);
        botonRestarRepeticiones.setEnabled(false);
        botonSumarRepeticiones.setEnabled(false);
    }

    public void activaControles() {
        jSlider1.setEnabled(true);
        sliderFrecuenciaTonos.setEnabled(true);
        sliderVolumenBinaural.setEnabled(true);
        sliderVolumenIsocronico.setEnabled(true);
        sliderVolumenMusica.setEnabled(true);
        sliderVolumenSilent.setEnabled(true);
        sliderVocoder.setEnabled(true);
        sliderBandasVocoder.setEnabled(true);
        botonRestarRepeticiones.setEnabled(true);
        botonSumarRepeticiones.setEnabled(true);
    }
    // Aquí las variables que indican la ruta de los archivos
    static String timeStamp;

    public static String renuevaTimeStamp() {
        timeStamp = new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
        return timeStamp;
    }
    static String rutaTerminado;

    public static String renuevaRutaTerminado() {
        rutaTerminado = archivoAbierto.getParent() + System.getProperty("file.separator") + "Subliminal" + renuevaTimeStamp() + ".wav";
        return rutaTerminado;
    }

    public File getArchivo() {
        return archivoAbierto;
    }

    class FiltroArchivos extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".wav" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".wav");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Archivos de Audio Wave (*.wav)";
        }
    }
}
